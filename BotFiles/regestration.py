import telebot
from telebot import types

from DataBase.data_base_code import *
from cfg import *

bot = API


def connect_db():
    conn = sqlite3.connect(dbPath)
    return conn


def create_users_table():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É users, –µ—Å–ª–∏ –µ—ë –µ—â–µ –Ω–µ—Ç."""
    conn = sqlite3.connect(dbPath)
    cursor = conn.cursor()
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS users (
            telegram_id INTEGER PRIMARY KEY,
            username TEXT,
            first_name TEXT,
            last_name TEXT
        )
    """)
    conn.commit()
    conn.close()


create_users_table()  # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç


def register_user(telegram_id, username, first_name, last_name):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω."""
    conn = sqlite3.connect(dbPath)
    cursor = conn.cursor()
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute("SELECT 1 FROM users WHERE telegram_id = ?", (telegram_id,))
    if cursor.fetchone() is None:
        cursor.execute(
            "INSERT INTO users (telegram_id, username, first_name, last_name) VALUES (?, ?, ?, ?)",
            (telegram_id, username, first_name, last_name)
        )
        conn.commit()
        return True  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
    else:
        return False  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
    conn.close()


@bot.message_handler(commands=["register"])
def start_registration(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –∏–ª–∏ /register."""
    user_id = message.from_user.id
    username = message.from_user.username or "No username"
    first_name = message.from_user.first_name or "No first name"
    last_name = message.from_user.last_name or "No last name"

    if register_user(user_id, username, first_name, last_name):
        keyboard_register = types.InlineKeyboardMarkup()

        # –ö–Ω–æ–ø–∫–∏
        add_build_button = types.InlineKeyboardButton(text="–°–æ–∑–¥–∞—Ç—å —Å–±–æ—Ä–∫—É", callback_data='add_build')

        # Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        keyboard_register.add(add_build_button)
        bot.send_message(message.chat.id, f"–¢–∞–∫-—Ç–æ –ª—É—á—à–µ! üòÖ\n–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {first_name}")
        bot.send_message(message.chat.id, "–ü—Ä–µ–¥–ª–æ–≥–∞—é –≤–∞–º –≤—ã–±—Ä–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏—è –∏–∑ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö –Ω–∏–∂–µ:",
                         reply_markup=keyboard_register)

    else:
        keyboard_register = types.InlineKeyboardMarkup()

        # –ö–Ω–æ–ø–∫–∏
        add_build_button = types.InlineKeyboardButton(text="–°–æ–∑–¥–∞—Ç—å —Å–±–æ—Ä–∫—É", callback_data='add_build')
        saved_build_button = types.InlineKeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ", callback_data="saved_builds")

        # Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        keyboard_register.add(add_build_button)
        keyboard_register.add(saved_build_button)
        bot.send_message(message.chat.id, f"–ú—ã —É–∂–µ –∑–Ω–∞–∫–æ–º—ã, {first_name}. üòä")
        bot.send_message(message.chat.id, "–ü—Ä–µ–¥–ª–æ–≥–∞—é —Ç–µ–±–µ –≤—ã–±—Ä–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏—è –∏–∑ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö –Ω–∏–∂–µ:",
                         reply_markup=keyboard_register)


@bot.callback_query_handler(func=lambda callback: True)
def response(callback):
    if callback.data == "add_build":
        try:
            bot.send_message(callback.message.chat.id, "–í—ã –Ω–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É '–°–æ–∑–¥–∞—Ç—å —Å–±–æ—Ä–∫—É'!")
        except:
            return
    elif callback.data == "saved_builds":
        try:
            bot.send_message(callback.message.chat.id, "–í—ã –Ω–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É '–°–æ–∑–¥–∞—Ç—å —Å–±–æ—Ä–∫—É'!")
        except:
            return
