import telebot
from telebot import types
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
import sqlite3
import os

from DataBase.data_base_code import db_path
from cfg import *

bot = API

active_builds = {}
# –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_build_progress = {}
user_budgets = {}  # –•—Ä–∞–Ω–µ–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π


# /////////////// #
# -–ö–æ–º–∞–Ω–¥–∞ start- #
# /////////////// #

@bot.message_handler(commands=["start"])
def start_message(message):
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, –¥—Ä—É–≥ üëã\n"
                                      "–Ø –±–æ—Ç –ñ–µ–ª–µ–∑—è–∫–∞, –ø—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è! üòä\n"
                                      "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–æ–±—Ä–∞—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä –∏—Å—Ö–æ–¥—è –∏–∑ —Ç–æ–π —Å—É–º–º—ã –∫–æ—Ç–æ—Ä–∞—è —É —Ç–µ–±—è –µ—Å—Ç—å.\n"
                                      "–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã —è —Å–º–æ–≥ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å, –¥–∞–≤–∞–π –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è üòÖ\n"
                                      "–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã —è —É–∑–Ω–∞–ª —Ç–µ–±—è –ø—Ä–æ–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É /register –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –µ—ë –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥. üëá\n\n"
                                      "–î–ª—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –ø—Ä–æ–ø–∏—à–∏ /help, –∏–ª–∏ —Ç–∞–∫ –∂–µ –≤—ã–±–µ—Ä–∏ –µ—ë –∏–∑ —Å–ø–∏—Å–∫–∞ üëá")

# ////////////// #
# -–ö–æ–º–∞–Ω–¥–∞ help- #
# ////////////// #

@bot.message_handler(commands=["help"])
def help_message(message):
    bot.send_message(message.chat.id, "–†–∞–∑–±–µ—Ä—ë–º –∫–æ–º–∞–Ω–¥—ã:\n"
                                      "/register - –ü–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –±–æ—Ç–æ–º (—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è)\n"
                                      "/add_build - –ù–∞—á–∞—Ç—å —Å–±–æ—Ä–∫—É\n"
                                      "/saved_builds - –°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Å–±–æ—Ä–∫–∏")





# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def get_components(component_type, max_price=None, compatibility=None):
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    query = f"SELECT id, name, specs, price, compatibility FROM {component_type}"
    params = []

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –±—é–¥–∂–µ—Ç—É
    if max_price:
        query += " WHERE price <= ?"
        params.append(max_price)

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    if compatibility:
        if "WHERE" in query:
            query += " AND"
        else:
            query += " WHERE"
        query += " compatibility LIKE ?"
        params.append(f"%{compatibility}%")

    cursor.execute(query, params)
    components = cursor.fetchall()
    conn.close()
    return components

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –±—é–¥–∂–µ—Ç–∞
@bot.message_handler(commands=['set_budget'])
def set_budget(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –±—é–¥–∂–µ—Ç (–≤ —Ä—É–±–ª—è—Ö):")

    def process_budget(msg):
        if not msg.text.isdigit():
            bot.send_message(msg.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
            return
        user_budgets[msg.chat.id] = int(msg.text)
        bot.send_message(msg.chat.id, f"–í–∞—à –±—é–¥–∂–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {msg.text} —Ä—É–±.")
        start_build(msg)

    bot.register_next_step_handler(message, process_budget)

# –ù–∞—á–∞–ª–æ –ø–æ–¥–±–æ—Ä–∞ —Å–±–æ—Ä–∫–∏
@bot.message_handler(commands=['start_build'])
def start_build(message):
    if message.chat.id not in user_budgets:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –±—é–¥–∂–µ—Ç —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /set_budget.")
        return

    user_build_progress[message.chat.id] = {}
    keyboard = types.InlineKeyboardMarkup()
    buttons = [
    types.InlineKeyboardButton(text="–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä", callback_data="select_cpus"),
    types.InlineKeyboardButton(text="–ú–∞—Ç–µ—Ä–∏–Ω—Å–∫–∞—è –ø–ª–∞—Ç–∞", callback_data="select_mother_boards"),
    types.InlineKeyboardButton(text="–í–∏–¥–µ–æ–∫–∞—Ä—Ç–∞", callback_data="select_gpus"),
    types.InlineKeyboardButton(text="–û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å", callback_data="select_rams"),
    types.InlineKeyboardButton(text="–ë–ª–æ–∫ –ø–∏—Ç–∞–Ω–∏—è", callback_data="select_power_supplies"),
    types.InlineKeyboardButton(text="–ù–∞–∫–æ–ø–∏—Ç–µ–ª—å", callback_data="select_storages"),
    types.InlineKeyboardButton(text="–ö–æ—Ä–ø—É—Å", callback_data="select_computer_cases")
    ]
    keyboard.add(*buttons)

    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–µ–≥–æ:", reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: call.data.startswith("select_"))
def select_component(call):
    # –ú–∞–ø–ø–∏–Ω–≥ callback_data –Ω–∞ –∏–º–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    component_map = {
        "cpus": "cpus",
        "mother_boards": "motherBoards",  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏–º—è —Ç–∞–±–ª–∏—Ü—ã —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —ç—Ç–∏–º –∫–ª—é—á–æ–º
        "gpus": "gpus",
        "rams": "rams",
        "power_supplies": "powerSupplies",  # –ò–º—è —Ç–∞–±–ª–∏—Ü—ã —Å–æ–≤–ø–∞–¥–∞–µ—Ç
        "storages": "storages",
        "computer_cases": "computerCases"  # –ò–º—è —Ç–∞–±–ª–∏—Ü—ã —Å–æ–≤–ø–∞–¥–∞–µ—Ç
    }

    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–∏–ø–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –∏–∑ callback_data
    component_type_key = call.data[len("select_"):]  # –ü–æ–ª—É—á–∞–µ–º —á–∞—Å—Ç—å –ø–æ—Å–ª–µ "select_"
    component_type = component_map.get(component_type_key)

    if not component_type:
        bot.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–µ–≥–æ ({component_type_key})!")
        return

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    max_price = user_budgets.get(call.message.chat.id)

    # –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –¥–ª—è —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏—Ö
    compatibility = None
    if component_type == "motherBoards":
        # –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–º
        compatibility = user_build_progress[call.message.chat.id].get("cpus")
    elif component_type == "rams":
        # –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –º–∞—Ç–µ—Ä–∏–Ω—Å–∫–æ–π –ø–ª–∞—Ç–æ–π
        compatibility = user_build_progress[call.message.chat.id].get("motherBoards")

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã
    components = get_components(component_type, max_price, compatibility)

    if not components:
        bot.answer_callback_query(call.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏—Ö.")
        return

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    keyboard = InlineKeyboardMarkup()
    for comp_id, name, specs, price, _ in components:
        keyboard.add(InlineKeyboardButton(
            text=f"{name} ({price} —Ä—É–±.) - {specs}",
            callback_data=f"add_{component_type}_{comp_id}"
        ))

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
    keyboard.add(InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="return_to_menu"))

    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.id,
        text=f"–í—ã–±–µ—Ä–∏—Ç–µ {component_type_key} (–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ –±—é–¥–∂–µ—Ç—É):",
        reply_markup=keyboard
    )


@bot.callback_query_handler(func=lambda call: call.data.startswith("add_"))
def add_to_build(call):
    _, component_type, comp_id = call.data.split("_")
    user_build_progress[call.message.chat.id][component_type] = comp_id
    bot.answer_callback_query(call.id, f"{component_type.capitalize()} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–±–æ—Ä–∫—É!")
    bot.send_message(call.message.chat.id, f"{component_type.capitalize()} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ—Å—Ç–∏ —Å–±–æ—Ä–∫–∏
    if len(user_build_progress[call.message.chat.id]) == 7:
        save_build_to_db(call.message.chat.id)
        bot.send_message(call.message.chat.id, "–°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
    else:
        start_build(call.message)

@bot.callback_query_handler(func=lambda call: call.data == "return_to_menu")
def return_to_menu(call):
    start_build(call.message)

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–±–æ—Ä–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
def save_build_to_db(user_id):
    build = user_build_progress[user_id]
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    cursor.execute("""
        INSERT INTO user_builds (telegram_id, cpu, motherboard, gpu, ram, power_supply, storage, computer_case)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?)
    """, (
        user_id,
        build.get("cpus"),
        build.get("mother_boards"),
        build.get("gpus"),
        build.get("rams"),
        build.get("power_supplies"),
        build.get("storages"),
        build.get("computer_cases")
    ))
    conn.commit()
    conn.close()
    del user_build_progress[user_id]
    bot.send_message(user_id, "–°–±–æ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling()


